#ifndef __HELPER_VIEWER_DRAW__
#define __HELPER_VIEWER_DRAW__

#include <TransfoGL.h>

//#define __DRAW_CONFIDENCE__

//
void Viewer::drawScene() 
{	
	if (b_is_init) {
		// -- récupération des dimensions des textures
		ViewportGL viewport;
		viewport.getGL();

		const Vec2 v2_screen_size( viewport.w, viewport.h );

		glLightfv( GL_LIGHT0, GL_POSITION, v4_light_position_in_world );
		float f_coef_ambient_light = 1.f - PARAM(float, shadow_volume.coef_alpha);
		Vec4 v4_color_ambient_light = Vec4( f_coef_ambient_light );
		glLightfv( GL_LIGHT0, GL_AMBIENT, v4_color_ambient_light );
		Vec4 v4_color_diffuse_light = Vec4( 1.f );
		glLightfv( GL_LIGHT0, GL_DIFFUSE, v4_color_diffuse_light );

		glMatrixMode(GL_MODELVIEW);

		if (PARAM(bool, plane.render))
		{
			glMatrixMode(GL_MODELVIEW);
			glPushMatrix();
				pt_object_to_world_plane.glMultModelView();
				drawPlane();
			glPopMatrix();
		}

		glPushMatrix();
			glMultMatrixd(qgl_mf_vbo.worldMatrix());

			glPushAttrib(GL_ALL_ATTRIB_BITS);
				PARAM(bool, vbo.enable_cull_face) ? glEnable(GL_CULL_FACE) : glDisable(GL_CULL_FACE);

				if ( PARAM(bool, vbo.render_caster) )
				{
					float f_coef_ambient_light = 1.0 - PARAM(float, shadow_volume.coef_alpha);
					//
					vbo_sv->setProg(prog_vbo);
					prog_vbo.activate();
						prog_vbo.setUniformVec3( "u_v3_light_pos_in_object", v4_light_position_in_object_vbo, false);
						prog_vbo.setUniform( "u_f_coef_ambient_lighting", f_coef_ambient_light, false );
						//
//						vbo_sv->render(GL_TRIANGLES, indexBuffer);
					prog_vbo.deactivate();
				}

			  	float f_coef_extrusion = PARAM(float, vbo.coef_extrusion);

				if (PARAM(bool, vbo.enable_polygon_offset))
				{
					glEnable(GL_POLYGON_OFFSET_FILL);
					glPolygonOffset( PARAM(float, vbo.polygon_offset_scale), PARAM(float, vbo.polygon_offset_bias) );
				}

				if (PARAM(bool, shadow_volume.render_shadow_volume_polygons) )
				{
					if (PARAM(bool, vbo.enable_blend_for_extrusion))
					{
						glEnable(GL_BLEND);
						glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
						glDepthMask( GL_FALSE );
					}

					float f_coef_alpha = PARAM(float, vbo.coef_alpha);
					glColor4f(0, 1, 0, f_coef_alpha);

					renderShadowVolumePolygons( f_coef_extrusion );
				}

				if ( PARAM(bool, shadow_volume.render_shadow) )
				{
					if (PARAM(bool, shadow_volume.depth_bounds.activate)) {
						glEnable(GL_DEPTH_BOUNDS_TEST_EXT);
						glDepthBoundsEXT( PARAM(float, shadow_volume.depth_bounds.zmin), PARAM(float, shadow_volume.depth_bounds.zmax) );
					}
					const GLuint N = 1;
					GLuint queries[N];
					GLuint sampleCount;
					GLint available;
					GLuint bitsSupported;

					// check to make sure functionality is supported
					glGetQueryiv(GL_SAMPLES_PASSED_ARB, GL_QUERY_COUNTER_BITS_ARB, (GLint*)(&bitsSupported));
			
					glGenQueriesARB(N, queries);
					glBeginQueryARB(GL_SAMPLES_PASSED_ARB, queries[0]);
						renderShadowVolume( f_coef_extrusion );
					glEndQuery(GL_SAMPLES_PASSED_ARB);
	//				glFlush();
					
					glDepthMask(0);
					glColorMask(1,1,1,1);
					glEnable(GL_BLEND);
					glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
					glEnable(GL_STENCIL_TEST);
					glStencilOp(GL_KEEP,            // stencil test fail
						    GL_KEEP,            // depth test fail
						    GL_KEEP);  	// depth test pass
					glStencilMask(~0);
//					glStencilFunc(GL_NOTEQUAL, 0, ~0);
//					glStencilFunc(GL_LESS, i_init_stencil, ~0);
					glStencilFunc(GL_NOTEQUAL, i_init_stencil, ~0);
					viewport.pushScreenMatrices();
						glColor4f(0.f, 0.f, 0.f, PARAM(float, shadow_volume.coef_alpha));
						viewport.drawScreenQuad();
					viewport.popScreenMatrices();

					if (PARAM(bool, shadow_volume.depth_bounds.activate)) {
						glDisable( GL_DEPTH_BOUNDS_TEST_EXT );
					}

//
					do {
					    glGetQueryObjectivARB(	queries[0], 
									GL_QUERY_RESULT_AVAILABLE_ARB,
		                          				&available
								);
					} while (!available);
					glGetQueryObjectuivARB(queries[0], GL_QUERY_RESULT_ARB, &sampleCount);				
					QString result;
					QTextStream(&result) << "# Occlusion Query => renderShadowVolumePolygons: "  << (float)(sampleCount) / (1000.f*1000.f) << " MegaPixels";
//					qglviewer::Vec screenPos = camera()->projectedCoordinatesOf(qgl_mf_vbo.position() + qglviewer::Vec(+1., 0, 0));
					qglviewer::Vec screenPos(0.f, 16.f * 2, 0.f);
					glDisable(GL_LIGHTING);
					glColor3f(0, 1, .2f);
					drawText((int)screenPos[0], (int)screenPos[1], result);
					glDeleteQueriesARB(N, queries);

				}
			glPopAttrib();
		glPopMatrix();

	}
}

void Viewer::renderShadowVolumePolygons( VertexDataBufferGL* _vbo_sv, IndexBufferUI* _indexBuffer_sv, ProgGLSL _prog_vbo_sv, float _f_coef_extrusion )
{
	float f_coef_seuil_iso = PARAM(float, vbo.coef_seuil_iso);

	// render vbo shadow volume polygons
	_vbo_sv->setProg( _prog_vbo_sv );
	_prog_vbo_sv.activate();
		_prog_vbo_sv.setUniformVec3( 	"u_v3_light_pos_in_object", v4_light_position_in_object_vbo, false);
		_prog_vbo_sv.setUniform( 	"u_f_coef_extrusion", _f_coef_extrusion, false);
		_prog_vbo_sv.setUniform( 	"u_f_seuil_iso", f_coef_seuil_iso, false);
		//
		_vbo_sv->render(GL_TRIANGLES, _indexBuffer_sv);
	_prog_vbo_sv.deactivate();
}

void Viewer::renderShadowVolumePolygons( float _f_coef_extrusion )
{
	renderShadowVolumePolygons( vbo_sv, indexBuffer_sv, prog_vbo_sv0, _f_coef_extrusion );
	renderShadowVolumePolygons( vbo_sv, indexBuffer_sv, prog_vbo_sv1, _f_coef_extrusion );
}

void Viewer::renderShadowVolume( float f_coef_extrusion )
{
	glPushAttrib(GL_ALL_ATTRIB_BITS);
		glDepthMask(0);
		glColorMask(0,0,0,0);
		glDisable(GL_CULL_FACE);
		glEnable(GL_STENCIL_TEST);
		glEnable(GL_STENCIL_TEST_TWO_SIDE_EXT);

		glActiveStencilFaceEXT(GL_BACK);
		glStencilOp(GL_KEEP,            // stencil test fail
		            GL_KEEP,            // depth test fail
		            GL_DECR_WRAP_EXT);  // depth test pass
		glStencilMask(~0);
		glStencilFunc(GL_ALWAYS, 0, ~0);

		glActiveStencilFaceEXT(GL_FRONT);
		glStencilOp(GL_KEEP,            // stencil test fail
		            GL_KEEP,            // depth test fail
		            GL_INCR_WRAP_EXT);  // depth test pass
		glStencilMask(~0);
		glStencilFunc(GL_ALWAYS, 0, ~0);

		renderShadowVolumePolygons(f_coef_extrusion);
	glPopAttrib();
}

void Viewer::drawPlane()
{
	const int i_nb_quad_patch = PARAM(int, plane.nb_quad_patch);
	float f_x, f_y, f_incr_x, f_incr_y;

	f_x = f_y = 0.f;
	f_incr_x = 1. / (float)(i_nb_quad_patch);
	f_incr_y = 1. / (float)(i_nb_quad_patch);

	// RENDER
	glPushAttrib(GL_ALL_ATTRIB_BITS);
		glDisable(GL_CULL_FACE);
		//
		glColor3f(1, 1, 1);
		for(int i=0; i<i_nb_quad_patch; i++)
		{
			f_x = 0.f;
			for(int j=0; j<i_nb_quad_patch; j++)
			{		
				glBegin(GL_QUADS);
					glNormal3f(0, 0, 1);	glVertex3f(f_x, f_y, 0);
					glNormal3f(0, 0, 1);	glVertex3f(f_x + f_incr_x, f_y, 0);
					glNormal3f(0, 0, 1);	glVertex3f(f_x + f_incr_x, f_y + f_incr_y, 0);
					glNormal3f(0, 0, 1);	glVertex3f(f_x, f_y + f_incr_y, 0);
				glEnd();
				f_x += f_incr_x;
			}
			f_y += f_incr_y;
		}
	glPopAttrib();
}

void Viewer::setOpenGLStates()
{
	// Activation du Depth buffer
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
	glDepthMask(GL_TRUE);
	// Desactivation du Blending (on sait jamais :p)
	glDisable(GL_BLEND);

	// Activation du backface culling
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);	  	
}

void Viewer::drawTexture(Texture tex, int x, int y, int w, int h) const {
    ViewportGL view, subView(x, y, w, h);   // plus general : taille texture
    TransfoGL::pushAndInit();
    view.setUnitSquare(subView);
    tex.activate();
    glBegin(GL_QUADS);
        glTexCoord2f(1,0); glVertex2f(1,0);
        glTexCoord2f(1,1); glVertex2f(1,1);
        glTexCoord2f(0,1); glVertex2f(0,1);
        glTexCoord2f(0,0); glVertex2f(0,0);
    glEnd();
    tex.deactivate();
    TransfoGL::pop();
    view.setGL();
    }

void Viewer::drawTextures()
{
	tex_shadow_map.bind();
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE, GL_NONE);
	
	const int i_screen_width = (*camera()).screenWidth();
	const int i_screen_height = (*camera()).screenHeight();
	const int i_texture_debug_width = int((float)(i_screen_width) / 6.f);
	const int i_texture_debug_height = int((float)(i_screen_height) / 6.f);

	drawTexture( tex_shadow_map, 0, 0, i_texture_debug_width, i_texture_debug_height );
	drawTexture( tex_edges_map, 0, i_texture_debug_height, i_texture_debug_width, i_texture_debug_height );
	
 	MSG_CHECK_GL;
}

void Viewer::drawLightCamera( float _fCoef_Alpha )
{
	glPushAttrib(GL_ALL_ATTRIB_BITS);
	// Disable Culling
	glDisable(GL_CULL_FACE);
	// Enable semi-transparent culling planes
  	glEnable(GL_BLEND);
  	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glDisable(GL_LIGHTING);
	glDepthMask(GL_FALSE);
  	glLineWidth(4.0);
  	glColor4f(1.0, 1.0, 1.0, _fCoef_Alpha );
  	// Draws the light's camera
	qgl_cam_light_mf.draw();
	// restore OpenGL attributes
	glPopAttrib();
}

#endif

